##
## Copyright (C) 2011, 2012 Pablo Barenbaum <foones@gmail.com>
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program. If not, see <http://www.gnu.org/licenses/>.
##

####
#### Gobstones grammar
####
#### Adapted from the official BNF specification,
#### to make rules right recursive, and avoid some
#### LL(1) ambiguities.
####
#### Some syntax checks are delayed to a later
#### step. For instance, this grammar conflates
#### function and procedure bodies, allowing
#### both to have (or not have) a return clause.
####
#### Also, reserved procedures, functions and
#### constants are made regular (built-in) procedures
#### and functions.
####
#### These checks could be done directly from the BNF,
#### but having a separate step simplifies the grammar
#### (a bit) and makes for clearer error-reporting. 
####

## Note:
##
## Gobstones seems NOT to be LL(1) because strings
## such as this one are conflictive with one token
## of lookahead:
##
##     a := f
##     (x) := g(y)
##
## The parser could predict either
##
##     a := f       ; (x) := g(y)   [ok]
##
## or
##
##     a := f(x)    :=              [fail]
##
## There is one first/follow conflict arising from this
## situation (see XXX).
##
## The grammar is written so that it chooses to
## disambiguate by the second case. The situation is
## solved by a hack at the lexical level by
## gbs_parser.GbsLexer._tokenize_solve_conflict

## The language is extended with type declarations that
## allow polymorphic procedures and functions.
##
## A type declaration goes right before the braces in
## function and procedure declarations:
##
##   function f(col1, col2, n) :: (Color, Color, Int) -> (Bool) { ... }
##   procedure P(d1, d2) :: (Dir, Dir) { ... }
##
## Polymorphic functions are declared using type variables.
## For example:
##
##   function distance(x, y) :: (a, a) -> (Int) {
##     d := 0
##     repeatWith i in x..y {
##       d := d + 1
##     }
##     return (d)
##   }
##

#### Syntax ####

<start> ::= <gobstones> ;;

## Programs

<gobstones> ::= <imports> <defs> @ program $1 $2 ;;

<defs> ::= <def> <defs> @ ++ [$1] $2
         | <EMPTY>      @ []
        ;;
<def>  ::= function <funcName> <params> <funcTypeDecl> <procFuncBody>
             @ function  $2 $3 $5 $4
         | <varProc?> program <procTypeDecl> <procFuncBody>
             @ entrypoint $2 [] $4 $3 $1
         | interactive <varProc?> program <procTypeDecl> <interactiveBody>
             @ entrypoint $1 [] $5 $4 $2
         | procedure <varProc?> <procName> <params> <procTypeDecl> <procFuncBody>
             @ procedure $3 $4 $6 $5 $2
         | <typedef>
        ;;

<varProc?> ::= <EMPTY> 		 @ None
		   	 | <varName-0> . @ $1
		   ;;

<params> ::= <varTuple> ;;

<procFuncBody> ::= { <cmds> <return?> } @ ++ $2 $3 ;;

<interactiveBody> ::= { <branches> } @ $2 ;;

<return?> ::= <EMPTY>    @ []
            | <return>   @ [$1]
           ;;
<return> ::= return <gexpTuple> <;?>   @ return $2 ;;

## Commands

<blockcmd> ::= { <cmds> }        @ block $2 ;;
<cmds>   ::= <EMPTY>             @ []
           | <cmd> <;?> <cmds>   @ ++ [$1] $3
          ;;
<cmd> ::= <simplecmd> | <compcmd> ;;

<simplecmd> ::= Skip                         @ Skip None
              | THROW_ERROR ( string )       @ THROW_ERROR $3
              | <procCallAssignVarName>      @ procCall/assignVarName $1
              | <procName> <args> 			 @ procCall $1 $2
              | <varTuple1> := <funcCall>    @ assignVarTuple1 $1 $3
             ;;

<compcmd> ::= if ( <gexp> ) <then?> <blockcmd> <else?>  @ if $3 $6 $7
            | switch ( <gexp> ) to <branches>   @ case $3 $6
            | while ( <gexp> ) <blockcmd>       @ while $3 $5
            | repeat ( <gexp> ) <blockcmd>          @ repeat $3 $5           
            | foreach <varName> in <gexp> <blockcmd>
                @ foreach $2 $4 $5
            | <blockcmd>
           ;;

<then?> ::= <EMPTY> | then ;;
<else?> ::= <EMPTY>           @ None
          | else <blockcmd>   @ $2
         ;;     

<branches> ::= <branch> <;?> <branches>    @ ++ [$1] $3
             | <defaultBranch>             @ [$1]
            ;;
<branch>        ::= <lits> -> <blockcmd>   @ branch $1 $3 ;;
<defaultBranch> ::= _ -> <blockcmd>        @ defaultBranch $3 ;;

<lits> ::= <caseLiteral> <lits*>  @ ++ [$1] $2 ;;
<lits*> ::= <EMPTY>               @ []
          | , <lits>              @ $2
         ;;

## Expressions

<gexp>      ::= <bexp> ;;
<bexp>      ::= <bterm> <bexp1>     @ INFIXL or ;;   
<bexp1>     ::= <zEMPTY>            @ None
              | <orop> <bexp>       @ OPERATOR $1 $2
            ;;                                      
<bterm>     ::= <bfact> <bterm1>    @ INFIXL and ;;
<bterm1>    ::= <zEMPTY>            @ None
              | && <bterm>          @ OPERATOR $1 $2
            ;;                                     
<bfact>     ::= not <batom>         @ not $2
              | <batom>                              
            ;;                                      
<batom>     ::= <nexp> <batom1>     @ INFIXL relop ;;
<batom1>    ::= <zEMPTY>            @ None
              | <rop> <nexp>        @ OPERATOR $1 $2    ## nonassoc
            ;;
<nexp>      ::= <nterm> <nexp1>     @ INFIXL addsub ;;
<nexp1>     ::= <zEMPTY>            @ None
              | <nop> <nexp>        @ OPERATOR $1 $2
            ;;                                      
<nterm>     ::= <nfactH> <nterm1>   @ INFIXL mul ;;
<nterm1>    ::= <zEMPTY>            @ None
              | * <nterm>           @ OPERATOR $1 $2
            ;;
<nfactH>    ::= <nfactL> <nfactH1>  @ INFIXL divmod ;;
<nfactH1>   ::= <zEMPTY>            @ None
              | <mop> <nfactL>      @ OPERATOR $1 $2    ## nonassoc
            ;;
<nfactL>    ::= <listop> <nfactL1>  @ INFIXL pow ;;
<nfactL1>   ::= <zEMPTY>            @ None
              | ^ <nfactL>          @ OPERATOR $1 $2
            ;;
<listop>    ::= <natom> <listop1>   @ INFIXL listop ;;
<listop1>   ::= <zEMPTY>            @ None
              | <lop> <listop>      @ OPERATOR $1 $2
            ;;
<natom> ::= - <natom>                           @ unaryMinus $2
          | <varFuncName> <args?>               @ varName/funcCall $1 $2
          | <literal> <cstrcArgs?>              @ literal/construct $1 $2
          | ( <gexp> )                          @ atom $2
          | <gexpList>                          @ $1
          | match ( <gexp> ) to <expBranch+>    @ match $3 $6
         ;;

<varFuncName> ::= <variable> ;;

<expBranch*> ::= <zEMPTY>        @ []
               | <expBranch+>
             ;;
             
<expBranch+> ::= <expBranch> <;?> <expBranch*>  @ ++ [$1] $3
               | <defExpBranch>                 @ [$1]
             ;;
             
<expBranch>     ::= <caseLiteral> -> <gexp>    @ branch $1 $3 ;;
<defExpBranch>  ::= _ -> <gexp>         @ defaultBranch $3 ;;
 
## lists
<gexpList>     ::= [ <lgexps*> ]    @ LIST $2 ;;
                
<lgexps*>  ::= <EMPTY>              @ []
            | <lgexps1> ;;

<lgexps1>  ::= <gexp> <lgexps2> 	@ ++ [$1] $2 ;;

<lgexps2>  ::= <..lgexp>			@ $1
			 | , <gexp> <lgexps3>	@ ++ [$2] $3
			 | <EMPTY>			@ []
		   ;;

<lgexps3>  ::= <..lgexp>		@ $1
			 | , <lgexps+>		@ $2
			 | <EMPTY>			@ []
		   ;;		   
			 
<,lgexps*> ::= <EMPTY>				@ []
		     | , <lgexps+>			@ $2
		   ;;
		   
<lgexps+>  ::= <gexp> <,lgexps*> 	@ ++ [$1] $2 ;; 

<..lgexp> ::= .. <gexp>   		 	@ range_to $2 ;;

########################################
## XXX: first/follow conflict
## in case of conflict, the parser choses the lexically least
## rule, i.e. <args?-0>
<args?> ::= <args?-0>
          | <args?-1>   @ None
         ;;
<args?-0> ::= <args> ;;
<args?-1> ::= <EMPTY> ;;

<orop> ::= || ;;
<rop> ::= == | /= | < | <= | >= | > ;;
<nop> ::= + | - ;;
<mop> ::= div | mod ;;
<lop> ::= ++ ;;
<lgop> ::= .. ;;

<funcCall> ::= <funcName> <args> @ funcCall $1 $2 ;;
<args> ::= <gexpTuple> ;;

<literal>     ::= <literN> | <literConst> | <literStr> ;;
<caseLiteral> ::= <literSignedN> | <literConst> ;;
<literConst>  ::= upperid ;;

<literN> ::= num ;;
<literSignedN> ::= num
                 | - num   @ NEGATE $2
                ;;
<literStr> ::= string ;;

## Auxiliary definitions

<procCallAssignVarName> ::= <varName-0> <optionals*> <assignVarName> @ assignVarName $1 $2 $3;;

<index> ::= [ <gexp> ] @ index $2 ;;
<field> ::= <fieldName> @ field $1 ;;

<assignVarName> ::= <EMPTY>     @ None
                  | := <gexp>   @ $2 
                ;;
<optionals*> ::= <EMPTY>        @ []
               | <optionals+>
             ;;
<optionals+> ::= . <fieldNameOrProcCall>   @ $2
               | <index> <optionals*>   @ ++ [$1] $2
             ;;
             
<fieldNameOrProcCall> ::= <procName> <args>     @ procCall $1 $2
                        | <field> <optionals*>  @ ++ [$1] $2
                      ;;

<variable>      ::= <varName> <indexOrField*>   @ $1 $2 ;;
<indexOrField*> ::= <EMPTY>                     @ []
                 | <indexOrField+>              
                ;;
<indexOrField+> ::= <index> <indexOrField*>     @ ++ [$1] $2
                  | . <field> <indexOrField*>   @ ++ [$2] $3
                ;;
                
<varName>     ::= lowerid ;;
<varName-0>   ::= <varName> @ varName $1 ;;
<funcName>    ::= lowerid ;;
<procName>    ::= upperid ;;

<varTuple>  ::= ( <varNames*> )         @ $2 ;;
<varTuple1> ::= ( <varNames+> )         @ $2 ;;
<varNames*> ::= <EMPTY>                 @ []
              | <varNames+> ;;
<varNames+> ::= <varName> <,varNames*>  @ ++ [$1] $2 ;;
<,varNames*> ::= <EMPTY>                @ []
               | , <varNames+>          @ $2
              ;;

<gexpTuple>  ::= ( <gexps*> )           @ $2 ;;
<gexps*>  ::= <EMPTY>                   @ []
            | <gexps+> ;;
<gexps+>  ::= <gexp> <,gexps*>          @ ++ [$1] $2
           ;;
<,gexps*> ::= <EMPTY>                   @ []
            | , <gexps+>                @ $2
           ;;

<;?> ::= <EMPTY>
       | ;
      ;;
      
<,?> ::= <EMPTY>
       | ,
      ;;
      
<caseSeparator?> ::= <caseSeparator?-0> 
                   | <caseSeparator?-1> 
                 ;;
<caseSeparator?-1> ::= <EMPTY> ;;
<caseSeparator?-0> ::= $$(CASE-SEPARATOR) ;;

<EMPTY>  ::= ;;
<zEMPTY> ::= <EMPTY> ;; ## Low priority empty

## Extension: type decl
<typedef> ::= type <typeName> is <type>
                @ typedef $2 $4 
          ;; 


<typeName> ::= upperid ;;
<type>  ::= <typeName>      @ type $1
          |  <variantType>  @ $1
          |  <recordType>   @ $1
        ;;

#######################
## Record & Variant Def
#######################

<recordType> ::= record <recordDef> @ record $2 ;;
<recordDef> ::= { <fieldDef+> }     @ ++ $2 ;;             
<fieldDef*> ::= <zEMPTY>            @ []
              | <fieldDef+> 
            ;;
<fieldDef+> ::= <fieldDef> <,?> <fieldDef*>     @ ++ [$1] $3 ;;                
<fieldDef>  ::= field <fieldName> <:type-opt>   @ ++ [field] [$2] $3 ;;
<:type-opt> ::= <EMPTY>       @ [None] 
              | : <type>      @ $2
            ;;

<variantType> ::= variant <variantDef>  @ variant $2 ;;
<variantDef>  ::= { <caseDefs> }        @ ++ $2 ;;
<caseDefs>    ::= <EMPTY>                               @ []
                | <caseDef> <caseSeparator?> <caseDefs> @ ++ [$1] $3
              ;;
<caseDef>     ::= case <typeName> <caseBodyDef>   @ case $2 $3 ;;
<caseBodyDef> ::= <zEMPTY> @ None   
                | <recordDef>
              ;; 
                      
<construct> ::= <typeName> ;;
<fieldName> ::= <varName>   @ SYMBOL $1 ;;

<cstrcArgs?>  ::= <zEMPTY>                @ []
				| ( <fieldGensOrSuchAs> ) @ $2
              ;; 

<fieldGensOrSuchAs> ::= <gexp> <suchAsOrField> <,fieldgen+> @ CONSTRUCTFIELDS $1 $2 $3 ;;

<suchAsOrField> ::= <- <gexp> 		   		       @ $1 $2
				  | $$(CASE-SEPARATOR) <fieldgen> @ $2 
				;;

<arecordSuchAs> ::= ( <gexp> $$(CASE-SEPARATOR) <fieldgen+> ) @ $1 $2;;
            
<fieldgenTuple> ::= ( <fieldgen*> )     @ $2 ;;

<fieldgen*> ::= <EMPTY>                 @ []
              | <fieldgen+>
            ;;
<fieldgen+> ::= <fieldgen> <,fieldgen+> @ ++ [$1] $2 ;;
<,fieldgen+> ::= <EMPTY>                @ []
              | , <fieldgen+>           @ $2
            ;;
<fieldgen> ::= <fieldName> <- <gexp>    @ MKFIELD $1 $3;;

################
## Extension: optional type declarations
################

<procTypeDecl> ::= <EMPTY>         @ None
                | :: <procType>   @ $2
                ;;

<funcTypeDecl> ::= <EMPTY>         @ None
                | :: <funcType>   @ $2
                ;;

<procType> ::= <typeTuple>      @ procType $1 ;;
<funcType> ::= <typeTuple> -> <typeOrTypeTuple1> @ funcType $1 $3 ;;
<typeOrTypeTuple1> ::= <atomicType>     @ [$1]
                     | <typeTuple1>     
                   ;;
<typeTuple>  ::= ( <type*> )         @ $2 ;;
<typeTuple1> ::= ( <type+> )         @ $2 ;;
<type*> ::= <EMPTY>                  @ []
          | <type+> ;;
<type+> ::= <atomicType> <,type*>    @ ++ [$1] $2 ;;
<,type*> ::= <EMPTY>                 @ []
           | , <type+>               @ $2
          ;;
<atomicType> ::= <basicType> | <typeVar> ;;
<basicType> ::= <typeName> <typeArgs?>  @ type $1 $2 ;;
<typeVar> ::= lowerid                @ typeVar $1 ;;

<typeArgs?> ::= <typeArgs?-0>
              | <typeArgs?-1> @ None
             ;;
<typeArgs?-0> ::= <typeTuple> ;;
<typeArgs?-1> ::= <EMPTY> ;;

##########
## Extension: module imports
##########

<imports> ::= <import> <imports>  @ ++ [$1] $2
            | <EMPTY>             @ []
           ;;

<import> ::= from <moduleName> import <rtnListOrAll>   @ import $2 $4 ;;

<moduleName> ::= upperid ;;

<rtnName> ::= upperid | lowerid ;;

<rtnListOrAll> ::= *                 @ [$1]
                 | ( <rtnList*> )    @ $2
               ;;
<rtnList*> ::= <EMPTY>               @ []
             | <rtnList+>
            ;;
<rtnList+> ::= <rtnName> <,rtnList*> @ ++ [$1] $2 ;;
<,rtnList*> ::= , <rtnList+>         @ $2
              | <EMPTY>              @ []
             ;;

#### Lexical syntax ####

## Tokens are defined using regular expressions.
## They are read from top to bottom. The first
## matching regular expression produces a token.

## Magic token that eats whitespace and comments
WHITESPACE ::= [ \t\r\n]+ ;;
COMMENT ::= --[^\n]*
          | //[^\n]*
          | #[^\n]*          
          | {-([^-]|-+[^}-])*-+}
          | /[*]([^*]|[*]+[^*/])*[*]+/
          | """([^"]|"[^"]|""[^"])*"""          
         ;;
COMMENT_start ::= /[*]([^*]|[*]+[^*/])*
                | {-([^-]|-+[^}-])*
                | """([^"]|"[^"]|""[^"])*
               ;;

num        ::= (0|[1-9][0-9]*) ;;
string     ::= ["](\\\"|\\[^"]|[^"\\])*["] ;;
lowerid    ::= [a-z][_a-zA-Z0-9']* ;;
upperid    ::= [A-Z][_a-zA-Z0-9']* ;;
operator   ::= _ | -> | := | [.][.] | , | ;
             | \( | \)
             | \{ | \}
             | \[ | \] | \+\+ | \.\.
             | \|\| | &&
             | \+  | \*  | - | \^
             | \. | :: | : | <- ## types
             | == | /= | <=  | >= | < | > | \|
            ;;
string_start ::= ["](\\\"|\\[^"]|[^"\\])* ;;

## Magic token that gives a separate type
## to reserved words and operators.
RESERVED ::= if | then | else | not
           | switch | to | match
           | while | Skip
           | THROW_ERROR
           | repeat
           | foreach | in
           | interactive | program | procedure | function | return
           | from | import
           | div | mod
           | ( | )
           | { | }
           | [ | ] | ++ | ..
           | -> | := | , | ; | _
           | || | && 
           | +  | *  | - | ^
           | type | is | field | record | case | variant | <- | . | $$(CASE-SEPARATOR) | var | :: | : ## types
           | == | /=  | <  | <=  | >=  | >
          ;;
